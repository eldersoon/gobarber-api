{"version":3,"sources":["../../../src/app/controllers/AppointmentController.js"],"names":["Yup","AppointmentController","req","res","query","page","Appointment","findAll","where","user_id","userId","canceled_at","attributes","limit","offset","order","include","model","User","as","File","appointments","data","date","Date","status","json","error","schema","object","shape","provider_id","number","required","isValid","body","findOne","id","provider","checkIsProvider","hourStart","checkApointment","create","appointment","findByPk","user","aptmtDate","locale","pt","Notification","content","name","params","limitHour","save","Queue","add","CancellationMail","key"],"mappings":"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","file":"AppointmentController.js","sourcesContent":["import * as Yup from 'yup';\nimport { startOfHour, parseISO, isBefore, format, subHours } from 'date-fns';\nimport pt from 'date-fns/locale/pt';\n\nimport Appointment from '../models/Appointment';\nimport User from '../models/User';\nimport File from '../models/File';\nimport Notification from '../schemas/Notification';\n\nimport CancellationMail from '../jobs/CancellationMail';\nimport Queue from '../../lib/Queue';\n\n\nclass AppointmentController {\n  async index(req, res) {\n    const { page = 1 } = req.query;\n\n    const appointments = await Appointment.findAll({\n      where: {\n        user_id: req.userId,\n        canceled_at: null,\n      },\n      attributes: ['id', 'date', 'past', 'cancelable'],\n      limit: 20,\n      offset: (page - 1) * 20,\n      order: ['date'],\n      include: [\n        {\n          model: User,\n          as: 'provider',\n          attributes: ['id', 'name'],\n          include: [\n            {\n              model: File,\n              as: 'avatar',\n              attributes: ['id', 'path', 'url'],\n            },\n          ],\n        },\n      ],\n    });\n\n    const data = appointments;\n\n    if (isBefore(data.date, new Date())) {\n      return res.status(400).json({ error: 'User does not have appointment!' })\n    }\n\n    return res.json(appointments);\n  }\n\n  async store(req, res) {\n    const schema = Yup.object().shape({\n      provider_id: Yup.number().required(),\n      date: Yup.date().required()\n    });\n\n    if (!(await schema.isValid(req.body))) {\n      return res.status(400).json({ error: 'Fail to validation' });\n    }\n    /**\n     * get providers only\n     */\n    const { provider_id, date } = req.body;\n\n    const checkIsProvider = await User.findOne({\n      where: {\n        id: provider_id,\n        provider: true\n      }\n    });\n\n    if (!checkIsProvider) {\n      return res.status(400).json({ error: 'Invalid provider, choose another one!' });\n    }\n\n    if (checkIsProvider.id == req.userId) {\n      return res.status(401).json({ error: 'You cant schedules yourself' });\n    }\n\n    const hourStart = startOfHour(parseISO(date));\n\n    if (isBefore(hourStart, new Date())) {\n      return res.status(400).json({ error: \"It's late to makes an appointment, try current hour!\" })\n    }\n\n    const checkApointment = await Appointment.findOne({\n      where: {\n        provider_id,\n        canceled_at: null,\n        date: hourStart\n      }\n    });\n\n    if (checkApointment) {\n      return res.status(400).json({ error: 'Appointment date is not available!' });\n    }\n\n    const appointment = await Appointment.create({\n      user_id: req.userId,\n      provider_id,\n      date: hourStart\n    });\n\n    /**\n     * Notify provider\n     */\n    const user = await User.findByPk(req.userId);\n    const aptmtDate = format(\n      hourStart,\n      \"'dia' dd 'de' MMMM 'Ã s' H:mm'h' \",\n      { locale: pt }\n    );\n\n    await Notification.create({\n      content: `Novo agendamento de ${user.name} para o ${aptmtDate}`,\n      user: provider_id,\n    });\n\n    return res.json(appointment);\n  }\n\n  async delete(req, res) {\n\n    const appointment = await Appointment.findByPk(req.params.id, {\n      include: [\n        {\n          model: User,\n          as: 'provider',\n          attributes: ['name', 'email'],\n        },\n        {\n          model: User,\n          as: 'user',\n          attributes: ['id', 'name'],\n        }\n      ]\n    });\n\n    if (appointment.user_id !== req.userId) {\n      return res.status(401).json({\n        error: \"You dont have perssion to cancel this appointment!\"\n      });\n    }\n\n    if (appointment.canceled_at != null) {\n      return res.status(400).json({\n        error: 'Appointment already canceled!'\n      });\n    }\n\n    const limitHour = subHours(appointment.date, 2);\n\n    if (isBefore(limitHour, new Date())) {\n      return res.status(401).json({ error: 'You cant cancel your appointment!' });\n    }\n\n    appointment.canceled_at = new Date();\n\n    await appointment.save();\n\n    await Queue.add(CancellationMail.key, {\n      appointment,\n    });\n\n    return res.json(appointment);\n  }\n}\n\nexport default new AppointmentController();\n"]}