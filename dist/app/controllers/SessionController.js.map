{"version":3,"sources":["../../../src/app/controllers/SessionController.js"],"names":["Yup","SessionController","req","res","schema","object","shape","email","string","password","required","isValid","body","status","json","error","User","findOne","where","user","checkPassword","id","name","token","jwt","sign","authConfig","secret","expiresIn"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;IAAYA,G;;AACZ;;;;AAEA;;;;AACA;;;;;;;;IAEMC,iB;;;;;;;;2GACQC,G,EAAKC,G;;;;;;;AAETC,sB,GAASJ,IAAIK,MAAJ,GAAaC,KAAb,CAAmB;;AAEhCC,yBAAOP,IAAIQ,MAAJ,GAAaD,KAAb,EAFyB;AAGhCE,4BAAUT,IAAIQ,MAAJ,GAAaE,QAAb;;AAHsB,iBAAnB,C;;uBAOHN,OAAOO,OAAP,CAAeT,IAAIU,IAAnB,C;;;;;;;;iDACHT,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,iCAAT,EAArB,C;;;4BAGmBb,IAAIU,I,EAAxBL,K,aAAAA,K,EAAOE,Q,aAAAA,Q;;uBAEIO,eAAKC,OAAL,CAAa;AAC9BC,yBAAO,EAAEX,YAAF;AADuB,iBAAb,C;;;AAAbY,oB;;oBAIDA,I;;;;;iDACIhB,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,qBAAT,EAArB,C;;;;uBAGGI,KAAKC,aAAL,CAAmBX,QAAnB,C;;;;;;;;iDACHN,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,8BAAT,EAArB,C;;;AAGDM,kB,GAAaF,I,CAAbE,E,EAAIC,I,GAASH,I,CAATG,I;iDAELnB,IAAIW,IAAJ,CAAS;AACdK,wBAAM;AACJE,0BADI;AAEJC,8BAFI;AAGJf;AAHI,mBADQ;AAMdgB,yBAAOC,uBAAIC,IAAJ,CAAS,EAAEJ,MAAF,EAAT,EAAiBK,eAAWC,MAA5B,EAAoC;AACzCC,+BAAWF,eAAWE;AADmB,mBAApC;AANO,iBAAT,C;;;;;;;;;;;;;;;;;;;;kBAaI,IAAI3B,iBAAJ,E","file":"SessionController.js","sourcesContent":["import * as Yup from 'yup';\nimport jwt from 'jsonwebtoken';\n\nimport User from '../models/User';\nimport authConfig from '../../config/auth';\n\nclass SessionController {\n  async store(req, res) {\n\n    const schema = Yup.object().shape({\n\n      email: Yup.string().email(),\n      password: Yup.string().required(),\n\n    });\n\n    if (!(await schema.isValid(req.body))) {\n      return res.status(400).json({ error: 'Email and password is required!' });\n    }\n\n    const { email, password } = req.body;\n\n    const user = await User.findOne({\n      where: { email }\n    });\n\n    if (!user) {\n      return res.status(401).json({ error: \"User doesn't exists\" });\n    }\n\n    if (!(await user.checkPassword(password))) {\n      return res.status(401).json({ error: \"Incorrect email or password!\" });\n    }\n\n    const { id, name } = user;\n\n    return res.json({\n      user: {\n        id,\n        name,\n        email\n      },\n      token: jwt.sign({ id }, authConfig.secret, {\n        expiresIn: authConfig.expiresIn,\n      }),\n    });\n  }\n}\n\nexport default new SessionController();\n"]}