{"version":3,"sources":["../../../src/app/controllers/ScheduleController.js"],"names":["ScheduleController","req","res","query","page","User","findOne","where","id","userId","provider","checkUserProvider","status","json","error","date","parseDate","Appointment","findAll","provider_id","canceled_at","Op","between","limit","offset","include","model","as","attributes","order","appointments"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;IAEMA,kB;;;;;;;;2GAEQC,G,EAAKC,G;;;;;;;kCACMD,IAAIE,K,CAAjBC,I,EAAAA,I,mCAAO,C;;uBAEiBC,eAAKC,OAAL,CAAa;AAC3CC,yBAAO,EAAEC,IAAIP,IAAIQ,MAAV,EAAkBC,UAAU,IAA5B;AADoC,iBAAb,C;;;AAA1BC,iC;;oBAIDA,iB;;;;;iDACIT,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,0BAAT,EAArB,C;;;AAGDC,oB,GAASd,IAAIE,K,CAAbY,I;AACFC,yB,GAAY,uBAASD,IAAT,C;;uBAESE,sBAAYC,OAAZ,CAAoB;AAC7CX,yBAAO;AACLY,iCAAalB,IAAIQ,MADZ;AAELW,iCAAa,IAFR;AAGLL,4DACGM,cAAGC,OADN,EACgB,CAAC,yBAAWN,SAAX,CAAD,EAAwB,uBAASA,SAAT,CAAxB,CADhB;AAHK,mBADsC;AAQ7CO,yBAAO,EARsC;AAS7CC,0BAAQ,CAACpB,OAAO,CAAR,IAAa,EATwB;AAU7CqB,2BAAS,CACP;AACEC,2BAAOrB,cADT;AAEEsB,wBAAI,MAFN;AAGEC,gCAAY,CAAC,MAAD;AAHd,mBADO,CAVoC;AAiB7CC,yBAAO,CAAC,MAAD;AAjBsC,iBAApB,C;;;AAArBC,4B;iDAoBC5B,IAAIW,IAAJ,CAASiB,YAAT,C;;;;;;;;;;;;;;;;;;;;kBAII,IAAI9B,kBAAJ,E","file":"ScheduleController.js","sourcesContent":["import User from '../models/User';\nimport Appointment from '../models/Appointment';\nimport { startOfDay, endOfDay, parseISO } from 'date-fns';\nimport { Op } from 'sequelize';\n\nclass ScheduleController {\n\n  async index(req, res) {\n    const { page = 1 } = req.query;\n\n    const checkUserProvider = await User.findOne({\n      where: { id: req.userId, provider: true },\n    });\n\n    if (!checkUserProvider) {\n      return res.status(401).json({ error: 'You are not a provider! ' });\n    }\n\n    const { date } = req.query;\n    const parseDate = parseISO(date);\n\n    const appointments = await Appointment.findAll({\n      where: {\n        provider_id: req.userId,\n        canceled_at: null,\n        date: {\n          [Op.between]: [startOfDay(parseDate), endOfDay(parseDate)],\n        },\n      },\n      limit: 10,\n      offset: (page - 1) * 10,\n      include: [\n        {\n          model: User,\n          as: 'user',\n          attributes: ['name']\n        },\n      ],\n      order: ['date'],\n    });\n\n    return res.json(appointments);\n  }\n}\n\nexport default new ScheduleController();\n"]}