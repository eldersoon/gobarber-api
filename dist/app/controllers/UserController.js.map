{"version":3,"sources":["../../../src/app/controllers/UserController.js"],"names":["Yup","UserController","req","res","schema","object","shape","name","string","required","email","password","min","isValid","body","status","json","error","User","findOne","where","userExists","create","id","provider","findAll","users","erros","oldPassword","when","field","passwordConfirmation","oneOf","ref","findByPk","userId","user","checkPassword","update"],"mappings":"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","file":"UserController.js","sourcesContent":["import * as Yup from 'yup';\nimport User from '../models/User';\n\nclass UserController {\n  async store(req, res) {\n\n    const schema = Yup.object().shape({\n      name: Yup.string().required(),\n      email: Yup.string().email().required(),\n      password: Yup.string().required().min(6),\n    });\n\n    if (!(await schema.isValid(req.body))) {\n      return res.status(400).json({ error: 'Fail to validation!' });\n    }\n\n    const userExists = await User.findOne({\n      where: { email: req.body.email }\n    });\n\n    if (userExists) {\n      return res.status(400).json({ error: 'Email alredy exists!' });\n    }\n\n    const { id, name, email, provider } = await User.create(req.body);\n\n    return res.json({ id, name, email, provider });\n  }\n\n  async index(req, res) {\n\n    const users = await User.findAll();\n\n    if (!users) {\n      return res.status(404).json({ erros: 'No one user found!' });\n    }\n\n    //const { id, name, email, provider } = users;\n\n    return res.json({ users });\n  }\n\n  async show(req, res) {\n\n  }\n\n  async update(req, res) {\n\n    const schema = Yup.object().shape({\n\n      name: Yup.string(),\n      email: Yup.string().email(),\n      oldPassword: Yup.string().min(6),\n      password: Yup.string().min(6)\n        .when('oldPassword', (oldPassword, field) =>\n          oldPassword ? field.required() : field\n        ),\n      passwordConfirmation: Yup.string()\n        .when('password', (password, field) =>\n          password ? field.required().oneOf([Yup.ref('password')]) : field\n        ),\n\n    });\n\n    if (!(await schema.isValid(req.body))) {\n      return res.status(400).json({ error: 'Fail to validation!' });\n    }\n\n    const { email, oldPassword } = req.body;\n\n    const user = await User.findByPk(req.userId);\n\n    if (email != user.email) {\n      const userExists = await User.findOne({\n        where: { email }\n      });\n\n      if (userExists) {\n        return res.status(400).json({ error: 'Email alredy exists!' });\n      }\n    }\n\n    if (oldPassword && !(await user.checkPassword(oldPassword))) {\n      return res.status(401).json({ error: 'Incorrect current password' })\n    }\n\n    const { id, name, provider } = await user.update(req.body);\n\n    return res.json({\n      id,\n      name,\n      email,\n      provider\n    });\n  }\n\n  async delete(req, res) {\n\n  }\n}\n\nexport default new UserController();\n"]}