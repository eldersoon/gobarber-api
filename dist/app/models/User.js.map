{"version":3,"sources":["../../../src/app/models/User.js"],"names":["User","password","bcrypt","compare","password_hash","sequelize","name","Sequelize","STRING","email","VIRTUAL","provider","BOOLEAN","underscored","addHook","user","hash","models","belongsTo","File","foreignKey","as","Model"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;IAEMA,I;;;;;;;;;;kCAiCUC,Q,EAAU;AACtB,aAAOC,mBAAOC,OAAP,CAAeF,QAAf,EAAyB,KAAKG,aAA9B,CAAP;AACD;;;yBAlCWC,S,EAAW;AAAA;;AACrB,yGAAW;AACTC,cAAMC,oBAAUC,MADP;AAETC,eAAOF,oBAAUC,MAFR;AAGTP,kBAAUM,oBAAUG,OAHX,EAGoB;AAC7BN,uBAAeG,oBAAUC,MAJhB;AAKTG,kBAAUJ,oBAAUK;AALX,OAAX,EAMG;AACDP,4BADC;AAEDQ,qBAAa;AAFZ,OANH;;AAWA;;;;AAIA,WAAKC,OAAL,CAAa,YAAb;AAAA,4FAA2B,iBAAMC,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA,uBACrBA,KAAKd,QADgB;AAAA;AAAA;AAAA;;AAAA;AAAA,yBAEIC,mBAAOc,IAAP,CAAYD,KAAKd,QAAjB,EAA2B,CAA3B,CAFJ;;AAAA;AAEvBc,uBAAKX,aAFkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA3B;;AAAA;AAAA;AAAA;AAAA;;AAMA,aAAO,IAAP;AACD;;AAED;;;;;;8BAGiBa,M,EAAQ;AACvB,WAAKC,SAAL,CAAeD,OAAOE,IAAtB,EAA4B,EAAEC,YAAY,WAAd,EAA2BC,IAAI,QAA/B,EAA5B;AACD;;;EA/BgBC,gB;;kBAsCJtB,I","file":"User.js","sourcesContent":["import Sequelize, { Model } from 'sequelize';\nimport bcrypt from 'bcryptjs';\n\nclass User extends Model {\n  static init(sequelize) {\n    super.init({\n      name: Sequelize.STRING,\n      email: Sequelize.STRING,\n      password: Sequelize.VIRTUAL, // VIRTUAL FIELD DOESN'T EXIST IN DB\n      password_hash: Sequelize.STRING,\n      provider: Sequelize.BOOLEAN,\n    }, {\n      sequelize,\n      underscored: true,\n    });\n\n    /**\n     * Before save information in database, addHook will be\n     * executed.\n     */\n    this.addHook('beforeSave', async user => {\n      if (user.password) {\n        user.password_hash = await bcrypt.hash(user.password, 8);\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Relation Model\n   */\n  static associate(models) {\n    this.belongsTo(models.File, { foreignKey: 'avatar_id', as: 'avatar' });\n  }\n\n  checkPassword(password) {\n    return bcrypt.compare(password, this.password_hash);\n  }\n}\n\nexport default User;\n"]}